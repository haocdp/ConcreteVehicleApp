package com.hbjy;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.alibaba.fastjson.JSON;
import com.hbjy.beans.VehicleMileageRecord;
import com.hbjy.carlocation.R;
import com.hbjy.nets.NetWork;
import com.hbjy.utils.Constant;
import com.hbjy.view.XListView;
import com.hbjy.view.XListView.IXListViewListener;

public class MileRecordList extends Activity implements IXListViewListener,
		OnClickListener {
	private ImageView iv_back;
	// private ImageButton ib_detailrecord;
	private Button bt_timebegin;
	private Button bt_timeend;
	private XListView xlv_milerecord;
	private TextView tv_selectDate;
	private Button bt_date_dec;
	private Button bt_date_inc;
	private ImageView iv_milesearch;
	private TextView tv_vehicleId;// 车牌号
	private Date currentDate;
	private Date timebegin = null;
	private Date timeend = null;
	private ProgressBar pb;
	private String BaseUrl;// url地址
	private String vehicleNum;
	private String vehicleId;
	private int index;
	private Toast mToast;// 显示提示信息
	private TextView tv_avgOilfee;//平均油耗
	private TextView tv_totaloils;//总油耗
	private TextView tv_totalmiles;//总里程
	private TextView tv_oilfee;//参考油费

	private ListAdapter contentAdapter;// 显示列表的适配器
	private List<VehicleMileageRecord> contents = new ArrayList<VehicleMileageRecord>();// 车牌号
	private List<VehicleMileageRecord> vehicleRecords;// 存放临时数据
	private String startTime;
	private String endTime;

	double totalmiles;// 总里程
	double totaloils;// 总油耗
	private Handler mHandler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 3:// 获取数据成功
				Log.d("数据加载完毕", "更新");
				pb.setVisibility(ProgressBar.GONE);
				xlv_milerecord.setVisibility(View.VISIBLE);
				tv_totalmiles.setText(totalmiles+"");
				tv_totaloils.setText(totalmiles+"");
				
				if(totalmiles==0)
					tv_avgOilfee.setText("0.0");
				else{
					double oilfee = Double.parseDouble(tv_oilfee.getText().toString());
					tv_avgOilfee.setText(totalmiles*oilfee/totalmiles+"");
				}
				
				if (vehicleRecords.size() >= 0) {
					contents.addAll(vehicleRecords);
					contentAdapter.notifyDataSetChanged();
					onLoad();
				}
				break;
			case 4:// 获取数据失败
				pb.setVisibility(ProgressBar.GONE);
				xlv_milerecord.setPullLoadEnable(false);
				showToast("此时间段没有数据");
				break;
			}
		}
	};

	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_mileage_record_list);
		vehicleRecords = new ArrayList<VehicleMileageRecord>();
		Intent it = getIntent();
		vehicleNum = it.getStringExtra("vehiclenum");// 车辆编号
		vehicleId = it.getStringExtra("vehicleId");
		index = 1;
		BaseUrl = NetWork.INFOVEHICLE_URL + "getMileRecordList/" + vehicleNum
				+ "/";
		findView();
		setupEvent();
		Init();
	}

	private void setupEvent() {
		// TODO Auto-generated method stub
		iv_back.setOnClickListener(this);
		// ib_detailrecord.setOnClickListener(this);

		bt_timebegin.setOnClickListener(this);
		bt_timeend.setOnClickListener(this);
		tv_selectDate.setOnClickListener(this);
		bt_date_dec.setOnClickListener(this);
		bt_date_inc.setOnClickListener(this);
		iv_milesearch.setOnClickListener(this);
		currentDate = Calendar.getInstance().getTime();
		bt_timebegin.setText((new SimpleDateFormat("HH:mm:ss")
				.format(currentDate.getTime() - 60 * 60 * 1000)));
		bt_timeend.setText((new SimpleDateFormat("HH:mm:ss")
				.format(currentDate)));
		tv_selectDate.setText((new SimpleDateFormat("yyyy-MM-dd")
				.format(currentDate)));
		try {
			timebegin = new SimpleDateFormat("HH:mm:ss").parse(bt_timebegin
					.getText().toString());
			timeend = new SimpleDateFormat("HH:mm:ss").parse(bt_timeend
					.getText().toString());
			Log.i("TimeBegin1111", timebegin.toString());
			Log.i("TimeEnd1111", timeend.toString());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// 列表
		contentAdapter = new ListAdapter(this, contents);
		xlv_milerecord.setPullLoadEnable(true);
		xlv_milerecord.setXListViewListener(this);
		xlv_milerecord.setAdapter(contentAdapter);
	}

	private void findView() {
		// TODO Auto-generated method stub
		iv_back = (ImageView) findViewById(R.id.iv_return);
		// ib_detailrecord=(ImageButton)findViewById(R.id.ib_mileDetailRecord);
		xlv_milerecord = (XListView) findViewById(R.id.xlv_mileage_record);
		bt_timebegin = (Button) findViewById(R.id.bt_timebegin);
		bt_timeend = (Button) findViewById(R.id.bt_timeend);
		tv_selectDate = (TextView) findViewById(R.id.tv_selectDate);
		bt_date_dec = (Button) findViewById(R.id.bt_date_dec);
		bt_date_inc = (Button) findViewById(R.id.bt_date_inc);
		iv_milesearch = (ImageView) findViewById(R.id.iv_milesearch);
		tv_vehicleId = (TextView) findViewById(R.id.tv_vehicleId);
		tv_vehicleId.setText(vehicleId);
		pb = (ProgressBar) findViewById(R.id.progressBar1);
		tv_avgOilfee = (TextView) findViewById(R.id.tv_avgOilfee);
		tv_totaloils = (TextView) findViewById(R.id.tv_totaloils);
		tv_totalmiles  = (TextView) findViewById(R.id.tv_totalmiles);
		tv_oilfee = (TextView) findViewById(R.id.tv_oilfee);
		tv_oilfee.setText(Constant.OILFEES+"");//默认油价
	}

	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.iv_return:
			finish();
			break;
		case R.id.bt_timebegin:
			final String[] oldtime_begin = bt_timebegin.getText().toString()
					.split(":");
			TimePickerDialog timePickDialog_begin = new TimePickerDialog(
					MileRecordList.this,
					new TimePickerDialog.OnTimeSetListener() {

						@Override
						public void onTimeSet(TimePicker view, int hourOfDay,
								int minute) {
							// TODO Auto-generated method stub
							String hour = (hourOfDay >= 10) ? String
									.valueOf(hourOfDay) : ("0" + hourOfDay);
							String min = (minute >= 10) ? String
									.valueOf(minute) : ("0" + minute);
							String st_timebegin = hour + ":" + min + ":"
									+ oldtime_begin[2];
							final String datebeginselect = tv_selectDate
									.getText().toString() + " " + st_timebegin;
							Date nowbeginTime_set = null;
							Date nowbeginDate = null;
							try {
								nowbeginDate = new SimpleDateFormat(
										"yyyy-MM-dd HH:mm:ss")
										.parse(datebeginselect); // 设置将要与系统时间比较
								nowbeginTime_set = new SimpleDateFormat(
										"HH:mm:ss").parse(st_timebegin);// 设置与结束时分秒比较
							} catch (ParseException e) {
								e.printStackTrace();
							}
							if (nowbeginDate.getTime() >= Calendar
									.getInstance().getTime().getTime()
									|| nowbeginTime_set.getTime() >= timeend
											.getTime()) {
								Toast.makeText(getApplication(),
										"您选择的时间应小于当前时间和结束时间",
										Toast.LENGTH_SHORT).show();
							} else {
								bt_timebegin.setText((new SimpleDateFormat(
										"HH:mm:ss").format(nowbeginTime_set)));
								timebegin = nowbeginTime_set;// 时分秒

							}
							Log.i("NowbeginDate", nowbeginDate.toString());
							Log.i("TimeBegin2222", timebegin.toString());
							Log.i("TimeEnd2222", timeend.toString());
						}
					}, Integer.parseInt(oldtime_begin[0]),
					Integer.parseInt(oldtime_begin[1]), true);
			timePickDialog_begin.show();
			break;

		case R.id.bt_timeend:
			final String[] oldtime_end = bt_timeend.getText().toString()
					.split(":");
			TimePickerDialog timePickDialog_end = new TimePickerDialog(
					MileRecordList.this,
					new TimePickerDialog.OnTimeSetListener() {

						@Override
						public void onTimeSet(TimePicker view, int hourOfDay,
								int minute) {
							// TODO Auto-generated method stub
							String hour = (hourOfDay >= 10) ? String
									.valueOf(hourOfDay) : ("0" + hourOfDay);
							String min = (minute >= 10) ? String
									.valueOf(minute) : ("0" + minute);
							String st_timeend = hour + ":" + min + ":"
									+ oldtime_end[2];
							final String timeendselect = tv_selectDate
									.getText().toString() + " " + st_timeend;
							Date nowendTime_set = null;
							Date nowendDate = null;
							try {
								nowendDate = new SimpleDateFormat(
										"yyyy-MM-dd HH:mm:ss")
										.parse(timeendselect); // 设置与系统时间进行比较
								nowendTime_set = new SimpleDateFormat(
										"HH:mm:ss").parse(st_timeend);// 设置与开始时分秒进行比较
							} catch (ParseException e) {
								e.printStackTrace();
							}
							if (nowendTime_set.getTime() <= timebegin.getTime()
									|| nowendDate.getTime() > Calendar
											.getInstance().getTime().getTime()) {
								Toast.makeText(getApplication(),
										"您选择的时间应小于当前时间并大于开始时间",
										Toast.LENGTH_LONG).show();
							} else {
								bt_timeend.setText((new SimpleDateFormat(
										"HH:mm:ss").format(nowendTime_set)));
								timeend = nowendTime_set;
							}
						}
					}, Integer.parseInt(oldtime_end[0]), Integer
							.parseInt(oldtime_end[1]), true);
			timePickDialog_end.show();
			break;
		case R.id.tv_selectDate:
			final String[] oldDate = tv_selectDate.getText().toString()
					.split("-");
			DatePickerDialog datePickDialog = new DatePickerDialog(
					MileRecordList.this,
					new DatePickerDialog.OnDateSetListener() {

						@Override
						public void onDateSet(DatePicker view, int year,
								int monthOfYear, int dayOfMonth) {
							// TODO Auto-generated method stub
							String month = (monthOfYear >= 9) ? String
									.valueOf(monthOfYear + 1)
									: ("0" + (monthOfYear + 1));
							String day = (dayOfMonth >= 10) ? String
									.valueOf(dayOfMonth) : ("0" + dayOfMonth);
							final String dateselect = year + "-" + month + "-"
									+ day;
							Date nowDate_set = null;
							try {
								nowDate_set = new SimpleDateFormat("yyyy-MM-dd")
										.parse(dateselect);
							} catch (ParseException e) {
								e.printStackTrace();
							}
							Date newDate_set = new Date(nowDate_set.getTime());
							if (newDate_set.getTime() > Calendar.getInstance()
									.getTime().getTime()) {
								Toast.makeText(getApplication(),
										"您选择的日期不能大于当前日期，已返回到当前日期",
										Toast.LENGTH_LONG).show();

							} else {
								tv_selectDate.setText((new SimpleDateFormat(
										"yyyy-MM-dd").format(newDate_set)));
							}
						}
					}, Integer.parseInt(oldDate[0]),
					Integer.parseInt(oldDate[1]) - 1,
					Integer.parseInt(oldDate[2]));
			datePickDialog.show();
			break;
		case R.id.bt_date_dec:
			final String oldDate_dec = tv_selectDate.getText().toString();
			Date nowDate_dec = null;
			try {
				nowDate_dec = new SimpleDateFormat("yyyy-MM-dd")
						.parse(oldDate_dec);
			} catch (ParseException e) {
				e.printStackTrace();
			}
			Date newDate_dec = new Date(nowDate_dec.getTime() - 24 * 60 * 60
					* 1000);
			tv_selectDate.setText((new SimpleDateFormat("yyyy-MM-dd")
					.format(newDate_dec)));
			break;
		case R.id.bt_date_inc:
			final String oldDate_inc = tv_selectDate.getText().toString();
			Date nowDate_inc = null;
			try {
				nowDate_inc = new SimpleDateFormat("yyyy-MM-dd")
						.parse(oldDate_inc);
			} catch (ParseException e) {
				e.printStackTrace();
			}
			Date newDate_inc = new Date(nowDate_inc.getTime() + 24 * 60 * 60
					* 1000);
			if (newDate_inc.getTime() > Calendar.getInstance().getTime()
					.getTime()) {
				Toast.makeText(getApplication(), "您选择的日期不能大于当前日期",
						Toast.LENGTH_SHORT).show();
			} else {
				tv_selectDate.setText((new SimpleDateFormat("yyyy-MM-dd")
						.format(newDate_inc)));
			}
			break;
		case R.id.iv_milesearch:// 查询
			// Toast.makeText(getApplication(),
			// "正在查询该时段行车记录",Toast.LENGTH_SHORT).show();
			Init();
			break;
		default:
			break;
		}
	}

	private void Init() {
		String selectDate = tv_selectDate.getText().toString().replace("-", "");
		startTime = selectDate
				+ bt_timebegin.getText().toString().replace(":", "");
		endTime = selectDate + bt_timeend.getText().toString().replace(":", "");
		Log.d("开始时间", startTime);
		Log.d("结束时间", endTime);
		pb.setVisibility(View.VISIBLE);
		xlv_milerecord.setVisibility(View.GONE);
		xlv_milerecord.setPullLoadEnable(true);// 默认可以下拉
		InitRecordData();
	}

	// 获得行车记录数据
	public void InitRecordData() {

		new Thread(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				String url = BaseUrl + startTime + "/" + endTime + "/" + index;
				try {
					String result = NetWork.getResponseString(url);
					Log.d("Result", result);
					if ("[]".equals(result)) {
						Log.d("Result", "没有数据");
						mHandler.sendEmptyMessage(4);// 没有数据
						return;
					}
					vehicleRecords.addAll(JSON.parseArray(result,
							VehicleMileageRecord.class));
					totalmiles = 0;
					totaloils = 0;
					for (VehicleMileageRecord vmr : vehicleRecords) {
						vmr.setStartPoint(NetWork.getAddressByLatLngDB(
								vmr.getS_lat(), vmr.getS_long()));
						vmr.setEndPoint(NetWork.getAddressByLatLngDB(
								vmr.getE_lat(), vmr.getE_long()));
						double miles = vmr.getE_miles() - vmr.getS_miles();
						miles = miles>0?miles:0;
						double oils = vmr.getE_oils() - vmr.getS_oils();
						oils = oils>0?oils:0;
						totalmiles += miles;
						totaloils += oils;
						vmr.setMiles(miles);
						vmr.setOils(oils);

					}

					mHandler.sendEmptyMessage(3);// 更新列表

				} catch (IOException e) {
					mHandler.sendEmptyMessage(4);// 没有数据

				}
			}
		}).start();
	}

	@Override
	public void onRefresh() {// 刷新
		// TODO Auto-generated method stub
		index = 1;// 初始化
		contents.clear();
		xlv_milerecord.setPullLoadEnable(true);// 默认可以下拉
		InitRecordData();
	}

	@Override
	public void onLoadMore() {// 更多
		// TODO Auto-generated method stub
		index++;
		InitRecordData();
	}

	private void onLoad() {
		xlv_milerecord.stopRefresh();
		xlv_milerecord.stopLoadMore();
		SimpleDateFormat format = new SimpleDateFormat("yyyy年MM月dd日  HH:mm");
		String date = format.format(new Date());
		xlv_milerecord.setRefreshTime(date);
	}

	public class ListAdapter extends BaseAdapter {
		private LayoutInflater mInflater;
		private List<VehicleMileageRecord> contents;

		public ListAdapter(Context context) {
			super();
			// TODO Auto-generated constructor stub
			mInflater = LayoutInflater.from(context);
		}

		public ListAdapter(Context context, List<VehicleMileageRecord> contents) {
			super();
			// TODO Auto-generated constructor stub
			mInflater = LayoutInflater.from(context);
			this.contents = contents;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return contents.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return contents.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			ViewHolder holder;

			if (convertView == null) {
				convertView = mInflater.inflate(
						R.layout.mileage_record_list_item, null);
				holder = new ViewHolder();
				holder.tv_startTime = (TextView) convertView
						.findViewById(R.id.tv_startTime);
				holder.tv_startPoint = (TextView) convertView
						.findViewById(R.id.tv_startPoint);
				holder.tv_endTime = (TextView) convertView
						.findViewById(R.id.tv_endTime);
				holder.tv_endPoint = (TextView) convertView
						.findViewById(R.id.tv_endPoint);
				holder.tv_distance = (TextView) convertView
						.findViewById(R.id.tv_distance);
				holder.tv_parkTime = (TextView) convertView
						.findViewById(R.id.tv_parkTime);
				convertView.setTag(holder);
			} else {
				holder = (ViewHolder) convertView.getTag();
			}
			VehicleMileageRecord vmr = contents.get(position);
			holder.tv_startTime.setText(vmr.getStarttime().replace("/", "-")
					+ " 起点");
			holder.tv_startPoint.setText(vmr.getStartPoint());
			holder.tv_endTime.setText(vmr.getEndtime().replace("/", "-")
					+ " 终点");
			holder.tv_endPoint.setText(vmr.getEndPoint());
			holder.tv_distance.setText(vmr.getMiles()+"");
			SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm");
			long m = 0;
			try {
				m = format.parse(vmr.getEndtime()).getTime()
						- format.parse(vmr.getStarttime()).getTime();// 毫秒数
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			holder.tv_parkTime.setText("滞留" + m / (60 * 1000) + "分钟");//

			return convertView;
		}

		public class ViewHolder {
			public TextView tv_startTime;
			public TextView tv_startPoint;
			public TextView tv_endTime;
			public TextView tv_endPoint;
			public TextView tv_distance;
			public TextView tv_parkTime;

		}

	}

	/**
	 * 显示Toast消息
	 * 
	 * @param msg
	 */
	private void showToast(String msg) {
		if (mToast == null) {
			mToast = Toast.makeText(this, msg, Toast.LENGTH_SHORT);
		} else {
			mToast.setText(msg);
			mToast.setDuration(Toast.LENGTH_SHORT);
		}
		mToast.show();
	}

}
